
1创建maven项目

2转化成springboot项目 只需在pom.xml文件中插入spring-boot-maven-plugin插件
再指定parent为spring-boot-starter-parent。最后添加springboot依赖
①插件：<plugins>
	<plugin>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-maven-plugin</artifactId>
	</plugin>
	</plugins>
②父类：<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.4.0.RELEASE</version>
	</parent>
③依赖：<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>3.8.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>1.3.0</version>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>5.1.35</version>
        </dependency>
        <!-- alibaba的druid数据库连接池 -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid</artifactId>
            <version>1.0.11</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-joda</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.module</groupId>
            <artifactId>jackson-module-parameter-names</artifactId>
        </dependency>
        <!-- 分页插件 -->
        <dependency>
            <groupId>com.github.pagehelper</groupId>
            <artifactId>pagehelper-spring-boot-starter</artifactId>
            <version>1.1.2</version>
        </dependency>
        <!-- alibaba的druid数据库连接池 -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid-spring-boot-starter</artifactId>
            <version>1.1.0</version>
        </dependency>
	</dependencies>
三：添加项目启动类
在src.mian.java包加创建类并加上springbootapplication注解
@SpringBootApplication
public class SpringBootRun {	
	public static void main(String[] args) throws Exception {
		SpringApplication.run(SpringBootRun.class, args);
	}
}
  启动类会启动时会自动加载当前目录及其子目录下的所有类（需要注解bean，直接注解即可）
比如在当前路径src.main.java下创建controller包，包内创建controller类并注解上@restcontroller注解 



四以上就算搭建成了一个springboot项目，接下整合mybatis
整合mybatis添加的依赖在第二步就添加上了

五在src.main.resources下面创建application.yml文件  springboot项目会自动读取appliction.yml文件内容。
  格式如下
spring:
    datasource:
        name: mydb
        url: jdbc:mysql://127.0.0.1:3306/mydb
        username: root
        password: 123456
        # 使用druid数据源
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        filters: stat
        maxActive: 20
        initialSize: 1
        maxWait: 60000
        minIdle: 1
        timeBetweenEvictionRunsMillis: 60000
        minEvictableIdleTimeMillis: 300000
        validationQuery: select 'x'
        testWhileIdle: true
        testOnBorrow: false
        testOnReturn: false
        poolPreparedStatements: true
        maxOpenPreparedStatements: 20
mybatis:
  mapper-locations: classpath:mapping/*.xml
  type-aliases-package: com.Bean.Pojo
   解析mybatis： mapper-locations：映射文件位置 映射文件等资源文件应该写在src.main.resources文件目录下 所以该classpath表示路径src.main.resources


六在启动类上加入资源方法扫描，
@SpringBootApplication
@MapperScan("com.Bean.Dao")
public class SpringBootRun {

	
	public static void main(String[] args) throws Exception {
		SpringApplication.run(SpringBootRun.class, args);
	}

}
