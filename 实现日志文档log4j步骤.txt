

   第一步：编写log4j日志基础属性log4j.properties文档
log4j.rootLogger=WARN,Console,File1


log4j.appender.Console=org.apache.log4j.ConsoleAppender
log4j.appender.Console.Target=System.out
log4j.appender.Console.Threshold=INFO
log4j.appender.Console.layout=org.apache.log4j.PatternLayout
log4j.appender.Console.layout.ConversionPattern=[%p][%d{yyyy-MM-dd HH\:mm\:ss}][%C] - %m%n

log4j.appender.File1=org.apache.log4j.FileAppender
log4j.appender.File1.File=F:/CSYLog.txt
log4j.appender.File1.Threshold=INFO
log4j.appender.File1.layout=org.apache.log4j.PatternLayout
log4j.appender.File1.layout.ConversionPattern=[%p][%d{yyyy-MM-dd HH\:mm\:ss}][%C] - %m%n




   第二步：在web.xml配置加载log4j.properties文件
  <context-param>
        <param-name>log4jConfigLocation</param-name>
        <param-value>classpath:log4j.properties</param-value>
    </context-param>



  第三步：在具体中使用log
public class PathInterceptor implements HandlerInterceptor{  

	private static final Log logger =LogFactory.getLog(PathInterceptor.class);//调用类名

               logger。info（String）； 使用方法

  第四步：导入log4j-1.2.17.jar包


日志结构含义：
%p：输出日志信息的优先级，即DEBUG，INFO，WARN，ERROR，FATAL。
%d：输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，如：%d{yyyy/MM/dd HH:mm:ss,SSS}。
%r：输出自应用程序启动到输出该log信息耗费的毫秒数。
%t：输出产生该日志事件的线程名。
%l：输出日志事件的发生位置，相当于%c.%M(%F:%L)的组合，包括类全名、方法、文件名以及在代码中的行数。例如：test.TestLog4j.main(TestLog4j.java:10)。
%c：输出日志信息所属的类目，通常就是所在类的全名。
%M：输出产生日志信息的方法名。
%F：输出日志消息产生时所在的文件名称。
%L:：输出代码中的行号。
%m:：输出代码中指定的具体日志信息。
%n：输出一个回车换行符，Windows平台为"rn"，Unix平台为"n"。
%x：输出和当前线程相关联的NDC(嵌套诊断环境)，尤其用到像java servlets这样的多客户多线程的应用中。
%%：输出一个"%"字符。
